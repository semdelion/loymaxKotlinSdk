/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package loymax.sdk.models


import com.squareup.moshi.Json

/**
 * Тип расчёта.
 *
 * Values: directDiscount,cashbackDiscount,limitPayment,confirmPurchase,cancelPurchase,payment,purchaseRefund,balance,issueCard,personActivity,sendPasswordToCheque,preCalculateCashback,goodsCalculateDiscount,goodsCalculateCashback
 */

enum class OfferCalculationType(val value: kotlin.String) {

    @Json(name = "DirectDiscount")
    directDiscount("DirectDiscount"),

    @Json(name = "CashbackDiscount")
    cashbackDiscount("CashbackDiscount"),

    @Json(name = "LimitPayment")
    limitPayment("LimitPayment"),

    @Json(name = "ConfirmPurchase")
    confirmPurchase("ConfirmPurchase"),

    @Json(name = "CancelPurchase")
    cancelPurchase("CancelPurchase"),

    @Json(name = "Payment")
    payment("Payment"),

    @Json(name = "PurchaseRefund")
    purchaseRefund("PurchaseRefund"),

    @Json(name = "Balance")
    balance("Balance"),

    @Json(name = "IssueCard")
    issueCard("IssueCard"),

    @Json(name = "PersonActivity")
    personActivity("PersonActivity"),

    @Json(name = "SendPasswordToCheque")
    sendPasswordToCheque("SendPasswordToCheque"),

    @Json(name = "PreCalculateCashback")
    preCalculateCashback("PreCalculateCashback"),

    @Json(name = "GoodsCalculateDiscount")
    goodsCalculateDiscount("GoodsCalculateDiscount"),

    @Json(name = "GoodsCalculateCashback")
    goodsCalculateCashback("GoodsCalculateCashback");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is OfferCalculationType) "$data" else null

        /**
         * Returns a valid [OfferCalculationType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): OfferCalculationType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

