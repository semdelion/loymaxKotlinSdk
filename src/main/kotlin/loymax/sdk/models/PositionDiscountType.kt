/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package loymax.sdk.models


import com.squareup.moshi.Json

/**
 * Тип скидки.
 *
 * Values: CALCULATED_CASHBACK,CALCULATED_DISCOUNT,PARTNER_DISCOUNT,PARTNER_CASHBACK,POSITION_CHARGE,CALCULATED_PAYMENT,CALCULATED_GIFT_CARD_PAYMENT,CALCULATED_GIFT_CERTIFICATE_PAYMENT
 */

enum class PositionDiscountType(val value: kotlin.String) {

    @Json(name = "CalculatedCashback")
    CALCULATED_CASHBACK("CalculatedCashback"),

    @Json(name = "CalculatedDiscount")
    CALCULATED_DISCOUNT("CalculatedDiscount"),

    @Json(name = "PartnerDiscount")
    PARTNER_DISCOUNT("PartnerDiscount"),

    @Json(name = "PartnerCashback")
    PARTNER_CASHBACK("PartnerCashback"),

    @Json(name = "PositionCharge")
    POSITION_CHARGE("PositionCharge"),

    @Json(name = "CalculatedPayment")
    CALCULATED_PAYMENT("CalculatedPayment"),

    @Json(name = "CalculatedGiftCardPayment")
    CALCULATED_GIFT_CARD_PAYMENT("CalculatedGiftCardPayment"),

    @Json(name = "CalculatedGiftCertificatePayment")
    CALCULATED_GIFT_CERTIFICATE_PAYMENT("CalculatedGiftCertificatePayment");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is PositionDiscountType) "$data" else null

        /**
         * Returns a valid [PositionDiscountType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): PositionDiscountType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

