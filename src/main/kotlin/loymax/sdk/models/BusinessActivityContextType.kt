/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package loymax.sdk.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: UNKNOWN,DEVICE_REQUEST,SHOWCASE_PURCHASE,USER_DATE_TIME_EVENT,BONUS_LIFE_TIME_EVENT,CHANGE_NOTIFIER,REGISTRATION_END,LINK_CARD,CHANGE_CARD_STATE,SMS_REGISTRATION,QUESTIONNAIRE_UPDATE,EXTERNAL_CARD_REPLACE,PUSH_DEVICE_REGISTRATION,SEND_PASSWORD_TO_CHEQUE,PURCHASE_OPERATION,SOCIAL_NETWORK_ACTION,MANUAL_PAY_OPERATION,REFERRAL_ACTIVITY,USER_DEREGISTRATION,PERSON_STATUS_CHANGE,GIFT_CERTIFICATE_OPERATION,STATUS_SYSTEM_CALCULATION,CUSTOMER_BEGIN_REGISTRATION,BATCH_CLIENT_IMPORT,CUSTOMER_REGISTRATION,LINK_ACCOUNT
 */

enum class BusinessActivityContextType(val value: kotlin.String) {

    @Json(name = "Unknown")
    UNKNOWN("Unknown"),

    @Json(name = "DeviceRequest")
    DEVICE_REQUEST("DeviceRequest"),

    @Json(name = "ShowcasePurchase")
    SHOWCASE_PURCHASE("ShowcasePurchase"),

    @Json(name = "UserDateTimeEvent")
    USER_DATE_TIME_EVENT("UserDateTimeEvent"),

    @Json(name = "BonusLifeTimeEvent")
    BONUS_LIFE_TIME_EVENT("BonusLifeTimeEvent"),

    @Json(name = "ChangeNotifier")
    CHANGE_NOTIFIER("ChangeNotifier"),

    @Json(name = "RegistrationEnd")
    REGISTRATION_END("RegistrationEnd"),

    @Json(name = "LinkCard")
    LINK_CARD("LinkCard"),

    @Json(name = "ChangeCardState")
    CHANGE_CARD_STATE("ChangeCardState"),

    @Json(name = "SmsRegistration")
    SMS_REGISTRATION("SmsRegistration"),

    @Json(name = "QuestionnaireUpdate")
    QUESTIONNAIRE_UPDATE("QuestionnaireUpdate"),

    @Json(name = "ExternalCardReplace")
    EXTERNAL_CARD_REPLACE("ExternalCardReplace"),

    @Json(name = "PushDeviceRegistration")
    PUSH_DEVICE_REGISTRATION("PushDeviceRegistration"),

    @Json(name = "SendPasswordToCheque")
    SEND_PASSWORD_TO_CHEQUE("SendPasswordToCheque"),

    @Json(name = "PurchaseOperation")
    PURCHASE_OPERATION("PurchaseOperation"),

    @Json(name = "SocialNetworkAction")
    SOCIAL_NETWORK_ACTION("SocialNetworkAction"),

    @Json(name = "ManualPayOperation")
    MANUAL_PAY_OPERATION("ManualPayOperation"),

    @Json(name = "ReferralActivity")
    REFERRAL_ACTIVITY("ReferralActivity"),

    @Json(name = "UserDeregistration")
    USER_DEREGISTRATION("UserDeregistration"),

    @Json(name = "PersonStatusChange")
    PERSON_STATUS_CHANGE("PersonStatusChange"),

    @Json(name = "GiftCertificateOperation")
    GIFT_CERTIFICATE_OPERATION("GiftCertificateOperation"),

    @Json(name = "StatusSystemCalculation")
    STATUS_SYSTEM_CALCULATION("StatusSystemCalculation"),

    @Json(name = "CustomerBeginRegistration")
    CUSTOMER_BEGIN_REGISTRATION("CustomerBeginRegistration"),

    @Json(name = "BatchClientImport")
    BATCH_CLIENT_IMPORT("BatchClientImport"),

    @Json(name = "CustomerRegistration")
    CUSTOMER_REGISTRATION("CustomerRegistration"),

    @Json(name = "LinkAccount")
    LINK_ACCOUNT("LinkAccount");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is BusinessActivityContextType) "$data" else null

        /**
         * Returns a valid [BusinessActivityContextType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): BusinessActivityContextType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

