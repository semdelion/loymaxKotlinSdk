/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package loymax.sdk.models


import com.squareup.moshi.Json

/**
 * Тип регулярного выражения.
 *
 * Values: BASE64,GUID,COMMENT,E_MAIL,ENTRY_PASSWORD,NULLABLE_ENTRY_PASSWORD,IP_ADDRESS,IPV6_ADDRESS,DECIMAL,PHONE,PHONE_LIKE,NAME_TEXT,DESCRIPTION_TEXT,DATE,DATE_TIME,DECIMAL_QUANTITY,PERCENT_VALUE,BONUS_PERCENT_VALUE,AMOUNT_VALUE,SUM_VALUE,TEMPLATE_ELEMENT_DATE,EMISSION_PREFIX,EMISSION_COUNT,EMISSION_NUMBER,LOGIN,CARD_NUMBER,CARD_EMISSION_COUNT,BOOKLET_PASSWORD,BOOKLET_NUMBER,CARD_NUMBER_PASSWORD,EMISSION_RANDOM,INTEGER,URL,TEMPLATE,URL_TEMPLATE,INT_PACK,IP_PACK,RSA,ANY_STRING
 */

enum class RegExpList(val value: kotlin.String) {

    @Json(name = "Base64")
    BASE64("Base64"),

    @Json(name = "Guid")
    GUID("Guid"),

    @Json(name = "Comment")
    COMMENT("Comment"),

    @Json(name = "EMail")
    E_MAIL("EMail"),

    @Json(name = "EntryPassword")
    ENTRY_PASSWORD("EntryPassword"),

    @Json(name = "NullableEntryPassword")
    NULLABLE_ENTRY_PASSWORD("NullableEntryPassword"),

    @Json(name = "IpAddress")
    IP_ADDRESS("IpAddress"),

    @Json(name = "Ipv6Address")
    IPV6_ADDRESS("Ipv6Address"),

    @Json(name = "Decimal")
    DECIMAL("Decimal"),

    @Json(name = "Phone")
    PHONE("Phone"),

    @Json(name = "PhoneLike")
    PHONE_LIKE("PhoneLike"),

    @Json(name = "NameText")
    NAME_TEXT("NameText"),

    @Json(name = "DescriptionText")
    DESCRIPTION_TEXT("DescriptionText"),

    @Json(name = "Date")
    DATE("Date"),

    @Json(name = "DateTime")
    DATE_TIME("DateTime"),

    @Json(name = "DecimalQuantity")
    DECIMAL_QUANTITY("DecimalQuantity"),

    @Json(name = "PercentValue")
    PERCENT_VALUE("PercentValue"),

    @Json(name = "BonusPercentValue")
    BONUS_PERCENT_VALUE("BonusPercentValue"),

    @Json(name = "AmountValue")
    AMOUNT_VALUE("AmountValue"),

    @Json(name = "SumValue")
    SUM_VALUE("SumValue"),

    @Json(name = "TemplateElementDate")
    TEMPLATE_ELEMENT_DATE("TemplateElementDate"),

    @Json(name = "EmissionPrefix")
    EMISSION_PREFIX("EmissionPrefix"),

    @Json(name = "EmissionCount")
    EMISSION_COUNT("EmissionCount"),

    @Json(name = "EmissionNumber")
    EMISSION_NUMBER("EmissionNumber"),

    @Json(name = "Login")
    LOGIN("Login"),

    @Json(name = "CardNumber")
    CARD_NUMBER("CardNumber"),

    @Json(name = "CardEmissionCount")
    CARD_EMISSION_COUNT("CardEmissionCount"),

    @Json(name = "BookletPassword")
    BOOKLET_PASSWORD("BookletPassword"),

    @Json(name = "BookletNumber")
    BOOKLET_NUMBER("BookletNumber"),

    @Json(name = "CardNumberPassword")
    CARD_NUMBER_PASSWORD("CardNumberPassword"),

    @Json(name = "EmissionRandom")
    EMISSION_RANDOM("EmissionRandom"),

    @Json(name = "Integer")
    INTEGER("Integer"),

    @Json(name = "Url")
    URL("Url"),

    @Json(name = "Template")
    TEMPLATE("Template"),

    @Json(name = "UrlTemplate")
    URL_TEMPLATE("UrlTemplate"),

    @Json(name = "IntPack")
    INT_PACK("IntPack"),

    @Json(name = "IpPack")
    IP_PACK("IpPack"),

    @Json(name = "Rsa")
    RSA("Rsa"),

    @Json(name = "AnyString")
    ANY_STRING("AnyString");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is RegExpList) "$data" else null

        /**
         * Returns a valid [RegExpList] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): RegExpList? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

