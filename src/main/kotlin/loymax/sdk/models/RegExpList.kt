/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package loymax.sdk.models


import com.squareup.moshi.Json

/**
 * Тип регулярного выражения.
 *
 * Values: base64,guid,comment,eMail,entryPassword,nullableEntryPassword,ipAddress,ipv6Address,decimal,phone,phoneLike,nameText,descriptionText,date,dateTime,decimalQuantity,percentValue,bonusPercentValue,amountValue,sumValue,templateElementDate,emissionPrefix,emissionCount,emissionNumber,login,cardNumber,cardEmissionCount,bookletPassword,bookletNumber,cardNumberPassword,emissionRandom,integer,url,template,urlTemplate,intPack,ipPack,rsa,anyString
 */

enum class RegExpList(val value: kotlin.String) {

    @Json(name = "Base64")
    base64("Base64"),

    @Json(name = "Guid")
    guid("Guid"),

    @Json(name = "Comment")
    comment("Comment"),

    @Json(name = "EMail")
    eMail("EMail"),

    @Json(name = "EntryPassword")
    entryPassword("EntryPassword"),

    @Json(name = "NullableEntryPassword")
    nullableEntryPassword("NullableEntryPassword"),

    @Json(name = "IpAddress")
    ipAddress("IpAddress"),

    @Json(name = "Ipv6Address")
    ipv6Address("Ipv6Address"),

    @Json(name = "Decimal")
    decimal("Decimal"),

    @Json(name = "Phone")
    phone("Phone"),

    @Json(name = "PhoneLike")
    phoneLike("PhoneLike"),

    @Json(name = "NameText")
    nameText("NameText"),

    @Json(name = "DescriptionText")
    descriptionText("DescriptionText"),

    @Json(name = "Date")
    date("Date"),

    @Json(name = "DateTime")
    dateTime("DateTime"),

    @Json(name = "DecimalQuantity")
    decimalQuantity("DecimalQuantity"),

    @Json(name = "PercentValue")
    percentValue("PercentValue"),

    @Json(name = "BonusPercentValue")
    bonusPercentValue("BonusPercentValue"),

    @Json(name = "AmountValue")
    amountValue("AmountValue"),

    @Json(name = "SumValue")
    sumValue("SumValue"),

    @Json(name = "TemplateElementDate")
    templateElementDate("TemplateElementDate"),

    @Json(name = "EmissionPrefix")
    emissionPrefix("EmissionPrefix"),

    @Json(name = "EmissionCount")
    emissionCount("EmissionCount"),

    @Json(name = "EmissionNumber")
    emissionNumber("EmissionNumber"),

    @Json(name = "Login")
    login("Login"),

    @Json(name = "CardNumber")
    cardNumber("CardNumber"),

    @Json(name = "CardEmissionCount")
    cardEmissionCount("CardEmissionCount"),

    @Json(name = "BookletPassword")
    bookletPassword("BookletPassword"),

    @Json(name = "BookletNumber")
    bookletNumber("BookletNumber"),

    @Json(name = "CardNumberPassword")
    cardNumberPassword("CardNumberPassword"),

    @Json(name = "EmissionRandom")
    emissionRandom("EmissionRandom"),

    @Json(name = "Integer")
    integer("Integer"),

    @Json(name = "Url")
    url("Url"),

    @Json(name = "Template")
    template("Template"),

    @Json(name = "UrlTemplate")
    urlTemplate("UrlTemplate"),

    @Json(name = "IntPack")
    intPack("IntPack"),

    @Json(name = "IpPack")
    ipPack("IpPack"),

    @Json(name = "Rsa")
    rsa("Rsa"),

    @Json(name = "AnyString")
    anyString("AnyString");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is RegExpList) "$data" else null

        /**
         * Returns a valid [RegExpList] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): RegExpList? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

