/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package loymax.sdk.models


import com.squareup.moshi.Json

/**
 * Код ответа.
 *
 * Values: ok,systemError,versionError,parseError,formatException,requereFieldException,signatureError,signatureNotFound,certificateError,cardNotFound,deviceNotFound,largePaymentAmount,notEnoughMoney,cardBlocked,deviceBlocked,notUniqueOperationID,operationNotFound,operationIsConfirmed,operationIsCanceled,wrongPin,cashierNotFound,cardHolderNotFound,cardNotActivated,discountException,purchaseNotFound,differentCheque,incorrectOperationOrder,cardExtraPayment,confirmedPurchaseOperation,purchaseExtraPayment,limitGained,paymentException,differentPurchase,couponsException,businessError,applicationDeviceGrant,notUniquePurchaseID,unspecifiedLoyaltyProgram,divisibilityError,differentLegals,created,payTypeIsNotExist,payTypeIsArchived,cardExpired,giftCertificateError,purchaseOperationConflict
 */

enum class ErrorCode(val value: kotlin.String) {

    @Json(name = "Ok")
    ok("Ok"),

    @Json(name = "SystemError")
    systemError("SystemError"),

    @Json(name = "VersionError")
    versionError("VersionError"),

    @Json(name = "ParseError")
    parseError("ParseError"),

    @Json(name = "FormatException")
    formatException("FormatException"),

    @Json(name = "RequereFieldException")
    requereFieldException("RequereFieldException"),

    @Json(name = "SignatureError")
    signatureError("SignatureError"),

    @Json(name = "SignatureNotFound")
    signatureNotFound("SignatureNotFound"),

    @Json(name = "CertificateError")
    certificateError("CertificateError"),

    @Json(name = "CardNotFound")
    cardNotFound("CardNotFound"),

    @Json(name = "DeviceNotFound")
    deviceNotFound("DeviceNotFound"),

    @Json(name = "LargePaymentAmount")
    largePaymentAmount("LargePaymentAmount"),

    @Json(name = "NotEnoughMoney")
    notEnoughMoney("NotEnoughMoney"),

    @Json(name = "CardBlocked")
    cardBlocked("CardBlocked"),

    @Json(name = "DeviceBlocked")
    deviceBlocked("DeviceBlocked"),

    @Json(name = "NotUniqueOperationID")
    notUniqueOperationID("NotUniqueOperationID"),

    @Json(name = "OperationNotFound")
    operationNotFound("OperationNotFound"),

    @Json(name = "OperationIsConfirmed")
    operationIsConfirmed("OperationIsConfirmed"),

    @Json(name = "OperationIsCanceled")
    operationIsCanceled("OperationIsCanceled"),

    @Json(name = "WrongPin")
    wrongPin("WrongPin"),

    @Json(name = "CashierNotFound")
    cashierNotFound("CashierNotFound"),

    @Json(name = "CardHolderNotFound")
    cardHolderNotFound("CardHolderNotFound"),

    @Json(name = "CardNotActivated")
    cardNotActivated("CardNotActivated"),

    @Json(name = "DiscountException")
    discountException("DiscountException"),

    @Json(name = "PurchaseNotFound")
    purchaseNotFound("PurchaseNotFound"),

    @Json(name = "DifferentCheque")
    differentCheque("DifferentCheque"),

    @Json(name = "IncorrectOperationOrder")
    incorrectOperationOrder("IncorrectOperationOrder"),

    @Json(name = "CardExtraPayment")
    cardExtraPayment("CardExtraPayment"),

    @Json(name = "ConfirmedPurchaseOperation")
    confirmedPurchaseOperation("ConfirmedPurchaseOperation"),

    @Json(name = "PurchaseExtraPayment")
    purchaseExtraPayment("PurchaseExtraPayment"),

    @Json(name = "LimitGained")
    limitGained("LimitGained"),

    @Json(name = "PaymentException")
    paymentException("PaymentException"),

    @Json(name = "DifferentPurchase")
    differentPurchase("DifferentPurchase"),

    @Json(name = "CouponsException")
    couponsException("CouponsException"),

    @Json(name = "BusinessError")
    businessError("BusinessError"),

    @Json(name = "ApplicationDeviceGrant")
    applicationDeviceGrant("ApplicationDeviceGrant"),

    @Json(name = "NotUniquePurchaseID")
    notUniquePurchaseID("NotUniquePurchaseID"),

    @Json(name = "UnspecifiedLoyaltyProgram")
    unspecifiedLoyaltyProgram("UnspecifiedLoyaltyProgram"),

    @Json(name = "DivisibilityError")
    divisibilityError("DivisibilityError"),

    @Json(name = "DifferentLegals")
    differentLegals("DifferentLegals"),

    @Json(name = "Created")
    created("Created"),

    @Json(name = "PayTypeIsNotExist")
    payTypeIsNotExist("PayTypeIsNotExist"),

    @Json(name = "PayTypeIsArchived")
    payTypeIsArchived("PayTypeIsArchived"),

    @Json(name = "CardExpired")
    cardExpired("CardExpired"),

    @Json(name = "GiftCertificateError")
    giftCertificateError("GiftCertificateError"),

    @Json(name = "PurchaseOperationConflict")
    purchaseOperationConflict("PurchaseOperationConflict");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ErrorCode) "$data" else null

        /**
         * Returns a valid [ErrorCode] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ErrorCode? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

