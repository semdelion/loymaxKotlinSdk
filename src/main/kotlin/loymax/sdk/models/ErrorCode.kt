/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package loymax.sdk.models


import com.squareup.moshi.Json

/**
 * Код ответа.
 *
 * Values: OK,SYSTEM_ERROR,VERSION_ERROR,PARSE_ERROR,FORMAT_EXCEPTION,REQUERE_FIELD_EXCEPTION,SIGNATURE_ERROR,SIGNATURE_NOT_FOUND,CERTIFICATE_ERROR,CARD_NOT_FOUND,DEVICE_NOT_FOUND,LARGE_PAYMENT_AMOUNT,NOT_ENOUGH_MONEY,CARD_BLOCKED,DEVICE_BLOCKED,NOT_UNIQUE_OPERATION_ID,OPERATION_NOT_FOUND,OPERATION_IS_CONFIRMED,OPERATION_IS_CANCELED,WRONG_PIN,CASHIER_NOT_FOUND,CARD_HOLDER_NOT_FOUND,CARD_NOT_ACTIVATED,DISCOUNT_EXCEPTION,PURCHASE_NOT_FOUND,DIFFERENT_CHEQUE,INCORRECT_OPERATION_ORDER,CARD_EXTRA_PAYMENT,CONFIRMED_PURCHASE_OPERATION,PURCHASE_EXTRA_PAYMENT,LIMIT_GAINED,PAYMENT_EXCEPTION,DIFFERENT_PURCHASE,COUPONS_EXCEPTION,BUSINESS_ERROR,APPLICATION_DEVICE_GRANT,NOT_UNIQUE_PURCHASE_ID,UNSPECIFIED_LOYALTY_PROGRAM,DIVISIBILITY_ERROR,DIFFERENT_LEGALS,CREATED,PAY_TYPE_IS_NOT_EXIST,PAY_TYPE_IS_ARCHIVED,CARD_EXPIRED,GIFT_CERTIFICATE_ERROR,PURCHASE_OPERATION_CONFLICT
 */

enum class ErrorCode(val value: kotlin.String) {

    @Json(name = "Ok")
    OK("Ok"),

    @Json(name = "SystemError")
    SYSTEM_ERROR("SystemError"),

    @Json(name = "VersionError")
    VERSION_ERROR("VersionError"),

    @Json(name = "ParseError")
    PARSE_ERROR("ParseError"),

    @Json(name = "FormatException")
    FORMAT_EXCEPTION("FormatException"),

    @Json(name = "RequereFieldException")
    REQUERE_FIELD_EXCEPTION("RequereFieldException"),

    @Json(name = "SignatureError")
    SIGNATURE_ERROR("SignatureError"),

    @Json(name = "SignatureNotFound")
    SIGNATURE_NOT_FOUND("SignatureNotFound"),

    @Json(name = "CertificateError")
    CERTIFICATE_ERROR("CertificateError"),

    @Json(name = "CardNotFound")
    CARD_NOT_FOUND("CardNotFound"),

    @Json(name = "DeviceNotFound")
    DEVICE_NOT_FOUND("DeviceNotFound"),

    @Json(name = "LargePaymentAmount")
    LARGE_PAYMENT_AMOUNT("LargePaymentAmount"),

    @Json(name = "NotEnoughMoney")
    NOT_ENOUGH_MONEY("NotEnoughMoney"),

    @Json(name = "CardBlocked")
    CARD_BLOCKED("CardBlocked"),

    @Json(name = "DeviceBlocked")
    DEVICE_BLOCKED("DeviceBlocked"),

    @Json(name = "NotUniqueOperationID")
    NOT_UNIQUE_OPERATION_ID("NotUniqueOperationID"),

    @Json(name = "OperationNotFound")
    OPERATION_NOT_FOUND("OperationNotFound"),

    @Json(name = "OperationIsConfirmed")
    OPERATION_IS_CONFIRMED("OperationIsConfirmed"),

    @Json(name = "OperationIsCanceled")
    OPERATION_IS_CANCELED("OperationIsCanceled"),

    @Json(name = "WrongPin")
    WRONG_PIN("WrongPin"),

    @Json(name = "CashierNotFound")
    CASHIER_NOT_FOUND("CashierNotFound"),

    @Json(name = "CardHolderNotFound")
    CARD_HOLDER_NOT_FOUND("CardHolderNotFound"),

    @Json(name = "CardNotActivated")
    CARD_NOT_ACTIVATED("CardNotActivated"),

    @Json(name = "DiscountException")
    DISCOUNT_EXCEPTION("DiscountException"),

    @Json(name = "PurchaseNotFound")
    PURCHASE_NOT_FOUND("PurchaseNotFound"),

    @Json(name = "DifferentCheque")
    DIFFERENT_CHEQUE("DifferentCheque"),

    @Json(name = "IncorrectOperationOrder")
    INCORRECT_OPERATION_ORDER("IncorrectOperationOrder"),

    @Json(name = "CardExtraPayment")
    CARD_EXTRA_PAYMENT("CardExtraPayment"),

    @Json(name = "ConfirmedPurchaseOperation")
    CONFIRMED_PURCHASE_OPERATION("ConfirmedPurchaseOperation"),

    @Json(name = "PurchaseExtraPayment")
    PURCHASE_EXTRA_PAYMENT("PurchaseExtraPayment"),

    @Json(name = "LimitGained")
    LIMIT_GAINED("LimitGained"),

    @Json(name = "PaymentException")
    PAYMENT_EXCEPTION("PaymentException"),

    @Json(name = "DifferentPurchase")
    DIFFERENT_PURCHASE("DifferentPurchase"),

    @Json(name = "CouponsException")
    COUPONS_EXCEPTION("CouponsException"),

    @Json(name = "BusinessError")
    BUSINESS_ERROR("BusinessError"),

    @Json(name = "ApplicationDeviceGrant")
    APPLICATION_DEVICE_GRANT("ApplicationDeviceGrant"),

    @Json(name = "NotUniquePurchaseID")
    NOT_UNIQUE_PURCHASE_ID("NotUniquePurchaseID"),

    @Json(name = "UnspecifiedLoyaltyProgram")
    UNSPECIFIED_LOYALTY_PROGRAM("UnspecifiedLoyaltyProgram"),

    @Json(name = "DivisibilityError")
    DIVISIBILITY_ERROR("DivisibilityError"),

    @Json(name = "DifferentLegals")
    DIFFERENT_LEGALS("DifferentLegals"),

    @Json(name = "Created")
    CREATED("Created"),

    @Json(name = "PayTypeIsNotExist")
    PAY_TYPE_IS_NOT_EXIST("PayTypeIsNotExist"),

    @Json(name = "PayTypeIsArchived")
    PAY_TYPE_IS_ARCHIVED("PayTypeIsArchived"),

    @Json(name = "CardExpired")
    CARD_EXPIRED("CardExpired"),

    @Json(name = "GiftCertificateError")
    GIFT_CERTIFICATE_ERROR("GiftCertificateError"),

    @Json(name = "PurchaseOperationConflict")
    PURCHASE_OPERATION_CONFLICT("PurchaseOperationConflict");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ErrorCode) "$data" else null

        /**
         * Returns a valid [ErrorCode] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ErrorCode? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

