/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package loymax.sdk.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: REWARD_BONUS,REWARD_DISCOUNT,REWARD_GIFT,REWARD_CHARGING,REWARD_BONUS_ACTIVATION,WITHDRAW_BONUS,WITHDRAW_GIFT_CARD,WITHDRAW,WITHDRAW_BONUS_EXPIRATION
 */

enum class HistoryItemOperationType(val value: kotlin.String) {

    @Json(name = "RewardBonus")
    REWARD_BONUS("RewardBonus"),

    @Json(name = "RewardDiscount")
    REWARD_DISCOUNT("RewardDiscount"),

    @Json(name = "RewardGift")
    REWARD_GIFT("RewardGift"),

    @Json(name = "RewardCharging")
    REWARD_CHARGING("RewardCharging"),

    @Json(name = "RewardBonusActivation")
    REWARD_BONUS_ACTIVATION("RewardBonusActivation"),

    @Json(name = "WithdrawBonus")
    WITHDRAW_BONUS("WithdrawBonus"),

    @Json(name = "WithdrawGiftCard")
    WITHDRAW_GIFT_CARD("WithdrawGiftCard"),

    @Json(name = "Withdraw")
    WITHDRAW("Withdraw"),

    @Json(name = "WithdrawBonusExpiration")
    WITHDRAW_BONUS_EXPIRATION("WithdrawBonusExpiration");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is HistoryItemOperationType) "$data" else null

        /**
         * Returns a valid [HistoryItemOperationType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): HistoryItemOperationType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

